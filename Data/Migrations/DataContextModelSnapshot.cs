// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bageri.api.Data;

#nullable disable

namespace bageri.api.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("bageri.api.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine")
                        .HasColumnType("longtext");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PostalAddressId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("PostalAddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("bageri.api.Entities.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AddressTypeId"));

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("AddressTypeId");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("bageri.api.Entities.ContactInformation", b =>
                {
                    b.Property<int>("ContactInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ContactInformationId"));

                    b.Property<string>("ContactPerson")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("ContactInformationId");

                    b.ToTable("ContactInformations");
                });

            modelBuilder.Entity("bageri.api.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("bageri.api.Entities.CustomerAddress", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("bageri.api.Entities.CustomerContactInformation", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ContactInformationId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "ContactInformationId");

                    b.HasIndex("ContactInformationId")
                        .IsUnique();

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerContactInformations");
                });

            modelBuilder.Entity("bageri.api.Entities.CustomerOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("bageri.api.Entities.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<string>("ItemNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<decimal>("PricePerKg")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("bageri.api.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("longtext");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("bageri.api.Entities.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOfPackages")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("bageri.api.Entities.PostalAddress", b =>
                {
                    b.Property<int>("PostalAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PostalAddressId"));

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext");

                    b.HasKey("PostalAddressId");

                    b.ToTable("PostalAddresses");
                });

            modelBuilder.Entity("bageri.api.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("AmountInPackage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<decimal>("PricePackage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("WeightInKg")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("bageri.api.Entities.ProductPreparation", b =>
                {
                    b.Property<int>("ProductPreparationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductPreparationId"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PreparationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductPreparationId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPreparations");
                });

            modelBuilder.Entity("bageri.api.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("bageri.api.Entities.SupplierAddress", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.HasKey("SupplierId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("SupplierAddresses");
                });

            modelBuilder.Entity("bageri.api.Entities.SupplierContactInformation", b =>
                {
                    b.Property<int>("ContactInformationId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("ContactInformationId", "SupplierId");

                    b.HasIndex("ContactInformationId")
                        .IsUnique();

                    b.HasIndex("SupplierId")
                        .IsUnique();

                    b.ToTable("SupplierContactInformations");
                });

            modelBuilder.Entity("bageri.api.Entities.SupplierIngredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("IngredientId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierIngredients");
                });

            modelBuilder.Entity("bageri.api.Entities.Address", b =>
                {
                    b.HasOne("bageri.api.Entities.AddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bageri.api.Entities.PostalAddress", "PostalAddress")
                        .WithMany("Addresses")
                        .HasForeignKey("PostalAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("PostalAddress");
                });

            modelBuilder.Entity("bageri.api.Entities.CustomerAddress", b =>
                {
                    b.HasOne("bageri.api.Entities.Address", "Address")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bageri.api.Entities.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("bageri.api.Entities.CustomerContactInformation", b =>
                {
                    b.HasOne("bageri.api.Entities.ContactInformation", "ContactInformation")
                        .WithOne("CustomerContactInformation")
                        .HasForeignKey("bageri.api.Entities.CustomerContactInformation", "ContactInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bageri.api.Entities.Customer", "Customer")
                        .WithOne("CustomerContactInformation")
                        .HasForeignKey("bageri.api.Entities.CustomerContactInformation", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactInformation");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("bageri.api.Entities.CustomerOrder", b =>
                {
                    b.HasOne("bageri.api.Entities.Customer", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bageri.api.Entities.Order", "Order")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("bageri.api.Entities.OrderProduct", b =>
                {
                    b.HasOne("bageri.api.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bageri.api.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("bageri.api.Entities.ProductPreparation", b =>
                {
                    b.HasOne("bageri.api.Entities.Product", "Product")
                        .WithMany("ProductPreparations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("bageri.api.Entities.SupplierAddress", b =>
                {
                    b.HasOne("bageri.api.Entities.Address", "Address")
                        .WithMany("SupplierAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bageri.api.Entities.Supplier", "Supplier")
                        .WithMany("SupplierAddresses")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("bageri.api.Entities.SupplierContactInformation", b =>
                {
                    b.HasOne("bageri.api.Entities.ContactInformation", "ContactInformation")
                        .WithOne("SupplierContactInformation")
                        .HasForeignKey("bageri.api.Entities.SupplierContactInformation", "ContactInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bageri.api.Entities.Supplier", "Supplier")
                        .WithOne("SupplierContactInformation")
                        .HasForeignKey("bageri.api.Entities.SupplierContactInformation", "SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactInformation");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("bageri.api.Entities.SupplierIngredient", b =>
                {
                    b.HasOne("bageri.api.Entities.Ingredient", "Ingredient")
                        .WithMany("SupplierIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bageri.api.Entities.Supplier", "Supplier")
                        .WithMany("SupplierIngredients")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("bageri.api.Entities.Address", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("SupplierAddresses");
                });

            modelBuilder.Entity("bageri.api.Entities.AddressType", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("bageri.api.Entities.ContactInformation", b =>
                {
                    b.Navigation("CustomerContactInformation");

                    b.Navigation("SupplierContactInformation");
                });

            modelBuilder.Entity("bageri.api.Entities.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerContactInformation");

                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("bageri.api.Entities.Ingredient", b =>
                {
                    b.Navigation("SupplierIngredients");
                });

            modelBuilder.Entity("bageri.api.Entities.Order", b =>
                {
                    b.Navigation("CustomerOrders");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("bageri.api.Entities.PostalAddress", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("bageri.api.Entities.Product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("ProductPreparations");
                });

            modelBuilder.Entity("bageri.api.Entities.Supplier", b =>
                {
                    b.Navigation("SupplierAddresses");

                    b.Navigation("SupplierContactInformation");

                    b.Navigation("SupplierIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
